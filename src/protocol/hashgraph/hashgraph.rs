// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod hashgraph {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_VERSION: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_VERSION: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_VERSION: [Version; 1] = [Version::V0];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Version(pub u8);
    #[allow(non_upper_case_globals)]
    impl Version {
        pub const V0: Self = Self(0);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 0;
        pub const ENUM_VALUES: &'static [Self] = &[Self::V0];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::V0 => Some("V0"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Version {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Version {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Version {
        type Output = Version;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Version {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Version {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Version {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_METHOD: u16 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_METHOD: u16 = 1;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_METHOD: [Method; 2] = [Method::Aure, Method::Key];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Method(pub u16);
    #[allow(non_upper_case_globals)]
    impl Method {
        pub const Aure: Self = Self(0);
        pub const Key: Self = Self(1);

        pub const ENUM_MIN: u16 = 0;
        pub const ENUM_MAX: u16 = 1;
        pub const ENUM_VALUES: &'static [Self] = &[Self::Aure, Self::Key];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Aure => Some("Aure"),
                Self::Key => Some("Key"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Method {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Method {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u16>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Method {
        type Output = Method;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u16>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Method {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u16::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u16::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Method {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u16::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Method {}
    #[allow(non_upper_case_globals)]
    mod bitflags_role {
        flatbuffers::bitflags::bitflags! {
          #[derive(Default)]
          pub struct Role: u64 {
            const Verification = 1;
            const Assertion = 2;
            const Authentication = 4;
            const Delegation = 8;
            const Invocation = 16;
            const KeyAgreement = 32;
          }
        }
    }
    pub use self::bitflags_role::Role;

    impl<'a> flatbuffers::Follow<'a> for Role {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u64>(buf, loc) };
            unsafe { Self::from_bits_unchecked(b) }
        }
    }

    impl flatbuffers::Push for Role {
        type Output = Role;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u64>(dst, self.bits());
            }
        }
    }

    impl flatbuffers::EndianScalar for Role {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u64::to_le(self.bits());
            unsafe { Self::from_bits_unchecked(b) }
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u64::from_le(self.bits());
            unsafe { Self::from_bits_unchecked(b) }
        }
    }

    impl<'a> flatbuffers::Verifiable for Role {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u64::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Role {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_ACTIONABLE: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_ACTIONABLE: u8 = 4;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ACTIONABLE: [Actionable; 5] = [
        Actionable::Grant,
        Actionable::Revoke,
        Actionable::Modify,
        Actionable::Recover,
        Actionable::Deactivate,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Actionable(pub u8);
    #[allow(non_upper_case_globals)]
    impl Actionable {
        pub const Grant: Self = Self(0);
        pub const Revoke: Self = Self(1);
        pub const Modify: Self = Self(2);
        pub const Recover: Self = Self(3);
        pub const Deactivate: Self = Self(4);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::Grant,
            Self::Revoke,
            Self::Modify,
            Self::Recover,
            Self::Deactivate,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Grant => Some("Grant"),
                Self::Revoke => Some("Revoke"),
                Self::Modify => Some("Modify"),
                Self::Recover => Some("Recover"),
                Self::Deactivate => Some("Deactivate"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Actionable {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Actionable {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Actionable {
        type Output = Actionable;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Actionable {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Actionable {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Actionable {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_DESCRIPTION: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_DESCRIPTION: u8 = 2;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_DESCRIPTION: [Description; 3] = [
        Description::NONE,
        Description::Embedded,
        Description::Reference,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Description(pub u8);
    #[allow(non_upper_case_globals)]
    impl Description {
        pub const NONE: Self = Self(0);
        pub const Embedded: Self = Self(1);
        pub const Reference: Self = Self(2);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 2;
        pub const ENUM_VALUES: &'static [Self] = &[Self::NONE, Self::Embedded, Self::Reference];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::Embedded => Some("Embedded"),
                Self::Reference => Some("Reference"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Description {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Description {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Description {
        type Output = Description;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Description {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Description {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Description {}
    pub struct DescriptionUnionTableOffset {}

    pub enum EmbeddedOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Embedded<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Embedded<'a> {
        type Inner = Embedded<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Embedded<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Embedded { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args EmbeddedArgs<'args>,
        ) -> flatbuffers::WIPOffset<Embedded<'bldr>> {
            let mut builder = EmbeddedBuilder::new(_fbb);
            if let Some(x) = args.controller {
                builder.add_controller(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.finish()
        }

        pub const VT_ID: flatbuffers::VOffsetT = 4;
        pub const VT_CONTROLLER: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn id(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Embedded::VT_ID,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn controller(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Embedded::VT_CONTROLLER,
                    None,
                )
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for Embedded<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"id",
                    Self::VT_ID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"controller",
                    Self::VT_CONTROLLER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct EmbeddedArgs<'a> {
        pub id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub controller: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for EmbeddedArgs<'a> {
        #[inline]
        fn default() -> Self {
            EmbeddedArgs {
                id: None,
                controller: None,
            }
        }
    }
    pub struct EmbeddedBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> EmbeddedBuilder<'a, 'b> {
        #[inline]
        pub fn add_id(&mut self, id: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Embedded::VT_ID, id);
        }
        #[inline]
        pub fn add_controller(
            &mut self,
            controller: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Embedded::VT_CONTROLLER, controller);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EmbeddedBuilder<'a, 'b> {
            let start = _fbb.start_table();
            EmbeddedBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Embedded<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Embedded<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Embedded");
            ds.field("id", &self.id());
            ds.field("controller", &self.controller());
            ds.finish()
        }
    }
    pub enum ReferenceOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Reference<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Reference<'a> {
        type Inner = Reference<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Reference<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Reference { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ReferenceArgs<'args>,
        ) -> flatbuffers::WIPOffset<Reference<'bldr>> {
            let mut builder = ReferenceBuilder::new(_fbb);
            if let Some(x) = args.controller {
                builder.add_controller(x);
            }
            if let Some(x) = args.id {
                builder.add_id(x);
            }
            builder.add_method(args.method);
            builder.finish()
        }

        pub const VT_METHOD: flatbuffers::VOffsetT = 4;
        pub const VT_ID: flatbuffers::VOffsetT = 6;
        pub const VT_CONTROLLER: flatbuffers::VOffsetT = 8;

        #[inline]
        pub fn method(&self) -> Method {
            self._tab
                .get::<Method>(Reference::VT_METHOD, Some(Method::Aure))
                .unwrap()
        }
        #[inline]
        pub fn id(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Reference::VT_ID,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn controller(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Reference::VT_CONTROLLER,
                    None,
                )
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for Reference<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<Method>(&"method", Self::VT_METHOD, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"id",
                    Self::VT_ID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"controller",
                    Self::VT_CONTROLLER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct ReferenceArgs<'a> {
        pub method: Method,
        pub id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub controller: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for ReferenceArgs<'a> {
        #[inline]
        fn default() -> Self {
            ReferenceArgs {
                method: Method::Aure,
                id: None,
                controller: None,
            }
        }
    }
    pub struct ReferenceBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ReferenceBuilder<'a, 'b> {
        #[inline]
        pub fn add_method(&mut self, method: Method) {
            self.fbb_
                .push_slot::<Method>(Reference::VT_METHOD, method, Method::Aure);
        }
        #[inline]
        pub fn add_id(&mut self, id: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Reference::VT_ID, id);
        }
        #[inline]
        pub fn add_controller(
            &mut self,
            controller: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                Reference::VT_CONTROLLER,
                controller,
            );
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReferenceBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ReferenceBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Reference<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Reference<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Reference");
            ds.field("method", &self.method());
            ds.field("id", &self.id());
            ds.field("controller", &self.controller());
            ds.finish()
        }
    }
    pub enum ActionOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Action<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Action<'a> {
        type Inner = Action<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Action<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Action { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ActionArgs,
        ) -> flatbuffers::WIPOffset<Action<'bldr>> {
            let mut builder = ActionBuilder::new(_fbb);
            builder.add_from(args.from);
            builder.add_roles(args.roles);
            if let Some(x) = args.description {
                builder.add_description(x);
            }
            builder.add_description_type(args.description_type);
            builder.add_actionable(args.actionable);
            builder.finish()
        }

        pub const VT_ACTIONABLE: flatbuffers::VOffsetT = 4;
        pub const VT_DESCRIPTION_TYPE: flatbuffers::VOffsetT = 6;
        pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 8;
        pub const VT_ROLES: flatbuffers::VOffsetT = 10;
        pub const VT_FROM: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn actionable(&self) -> Actionable {
            self._tab
                .get::<Actionable>(Action::VT_ACTIONABLE, Some(Actionable::Grant))
                .unwrap()
        }
        #[inline]
        pub fn description_type(&self) -> Description {
            self._tab
                .get::<Description>(Action::VT_DESCRIPTION_TYPE, Some(Description::NONE))
                .unwrap()
        }
        #[inline]
        pub fn description(&self) -> Option<flatbuffers::Table<'a>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    Action::VT_DESCRIPTION,
                    None,
                )
        }
        #[inline]
        pub fn roles(&self) -> u64 {
            self._tab.get::<u64>(Action::VT_ROLES, Some(0)).unwrap()
        }
        #[inline]
        pub fn from(&self) -> i64 {
            self._tab.get::<i64>(Action::VT_FROM, Some(0)).unwrap()
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn description_as_embedded(&self) -> Option<Embedded<'a>> {
            if self.description_type() == Description::Embedded {
                self.description().map(Embedded::init_from_table)
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn description_as_reference(&self) -> Option<Reference<'a>> {
            if self.description_type() == Description::Reference {
                self.description().map(Reference::init_from_table)
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for Action<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<Actionable>(&"actionable", Self::VT_ACTIONABLE, false)?
                .visit_union::<Description, _>(
                    &"description_type",
                    Self::VT_DESCRIPTION_TYPE,
                    &"description",
                    Self::VT_DESCRIPTION,
                    false,
                    |key, v, pos| match key {
                        Description::Embedded => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<Embedded>>(
                                "Description::Embedded",
                                pos,
                            ),
                        Description::Reference => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<Reference>>(
                                "Description::Reference",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .visit_field::<u64>(&"roles", Self::VT_ROLES, false)?
                .visit_field::<i64>(&"from", Self::VT_FROM, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ActionArgs {
        pub actionable: Actionable,
        pub description_type: Description,
        pub description: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
        pub roles: u64,
        pub from: i64,
    }
    impl<'a> Default for ActionArgs {
        #[inline]
        fn default() -> Self {
            ActionArgs {
                actionable: Actionable::Grant,
                description_type: Description::NONE,
                description: None,
                roles: 0,
                from: 0,
            }
        }
    }
    pub struct ActionBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ActionBuilder<'a, 'b> {
        #[inline]
        pub fn add_actionable(&mut self, actionable: Actionable) {
            self.fbb_
                .push_slot::<Actionable>(Action::VT_ACTIONABLE, actionable, Actionable::Grant);
        }
        #[inline]
        pub fn add_description_type(&mut self, description_type: Description) {
            self.fbb_.push_slot::<Description>(
                Action::VT_DESCRIPTION_TYPE,
                description_type,
                Description::NONE,
            );
        }
        #[inline]
        pub fn add_description(
            &mut self,
            description: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Action::VT_DESCRIPTION, description);
        }
        #[inline]
        pub fn add_roles(&mut self, roles: u64) {
            self.fbb_.push_slot::<u64>(Action::VT_ROLES, roles, 0);
        }
        #[inline]
        pub fn add_from(&mut self, from: i64) {
            self.fbb_.push_slot::<i64>(Action::VT_FROM, from, 0);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ActionBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ActionBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Action<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Action<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Action");
            ds.field("actionable", &self.actionable());
            ds.field("description_type", &self.description_type());
            match self.description_type() {
                Description::Embedded => {
                    if let Some(x) = self.description_as_embedded() {
                        ds.field("description", &x)
                    } else {
                        ds.field(
                            "description",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                Description::Reference => {
                    if let Some(x) = self.description_as_reference() {
                        ds.field("description", &x)
                    } else {
                        ds.field(
                            "description",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("description", &x)
                }
            };
            ds.field("roles", &self.roles());
            ds.field("from", &self.from());
            ds.finish()
        }
    }
    pub enum OperationOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Operation<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Operation<'a> {
        type Inner = Operation<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Operation<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Operation { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args OperationArgs<'args>,
        ) -> flatbuffers::WIPOffset<Operation<'bldr>> {
            let mut builder = OperationBuilder::new(_fbb);
            builder.add_timestamp(args.timestamp);
            if let Some(x) = args.actions {
                builder.add_actions(x);
            }
            if let Some(x) = args.previous {
                builder.add_previous(x);
            }
            builder.add_sequence(args.sequence);
            builder.add_version(args.version);
            builder.finish()
        }

        pub const VT_VERSION: flatbuffers::VOffsetT = 4;
        pub const VT_SEQUENCE: flatbuffers::VOffsetT = 6;
        pub const VT_PREVIOUS: flatbuffers::VOffsetT = 8;
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;
        pub const VT_ACTIONS: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn version(&self) -> Version {
            self._tab
                .get::<Version>(Operation::VT_VERSION, Some(Version::V0))
                .unwrap()
        }
        #[inline]
        pub fn sequence(&self) -> u32 {
            self._tab
                .get::<u32>(Operation::VT_SEQUENCE, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn previous(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Operation::VT_PREVIOUS,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn timestamp(&self) -> i64 {
            self._tab
                .get::<i64>(Operation::VT_TIMESTAMP, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn actions(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Action<'a>>>> {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Action>>,
            >>(Operation::VT_ACTIONS, None)
        }
    }

    impl flatbuffers::Verifiable for Operation<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<Version>(&"version", Self::VT_VERSION, false)?
                .visit_field::<u32>(&"sequence", Self::VT_SEQUENCE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"previous",
                    Self::VT_PREVIOUS,
                    false,
                )?
                .visit_field::<i64>(&"timestamp", Self::VT_TIMESTAMP, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Action>>,
                >>(&"actions", Self::VT_ACTIONS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct OperationArgs<'a> {
        pub version: Version,
        pub sequence: u32,
        pub previous: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub timestamp: i64,
        pub actions: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Action<'a>>>,
            >,
        >,
    }
    impl<'a> Default for OperationArgs<'a> {
        #[inline]
        fn default() -> Self {
            OperationArgs {
                version: Version::V0,
                sequence: 0,
                previous: None,
                timestamp: 0,
                actions: None,
            }
        }
    }
    pub struct OperationBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> OperationBuilder<'a, 'b> {
        #[inline]
        pub fn add_version(&mut self, version: Version) {
            self.fbb_
                .push_slot::<Version>(Operation::VT_VERSION, version, Version::V0);
        }
        #[inline]
        pub fn add_sequence(&mut self, sequence: u32) {
            self.fbb_
                .push_slot::<u32>(Operation::VT_SEQUENCE, sequence, 0);
        }
        #[inline]
        pub fn add_previous(
            &mut self,
            previous: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Operation::VT_PREVIOUS, previous);
        }
        #[inline]
        pub fn add_timestamp(&mut self, timestamp: i64) {
            self.fbb_
                .push_slot::<i64>(Operation::VT_TIMESTAMP, timestamp, 0);
        }
        #[inline]
        pub fn add_actions(
            &mut self,
            actions: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Action<'b>>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Operation::VT_ACTIONS, actions);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OperationBuilder<'a, 'b> {
            let start = _fbb.start_table();
            OperationBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Operation<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Operation<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Operation");
            ds.field("version", &self.version());
            ds.field("sequence", &self.sequence());
            ds.field("previous", &self.previous());
            ds.field("timestamp", &self.timestamp());
            ds.field("actions", &self.actions());
            ds.finish()
        }
    }
    pub enum SignatureHeaderOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct SignatureHeader<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for SignatureHeader<'a> {
        type Inner = SignatureHeader<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> SignatureHeader<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            SignatureHeader { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignatureHeaderArgs<'args>,
        ) -> flatbuffers::WIPOffset<SignatureHeader<'bldr>> {
            let mut builder = SignatureHeaderBuilder::new(_fbb);
            if let Some(x) = args.signer {
                builder.add_signer(x);
            }
            builder.finish()
        }

        pub const VT_SIGNER: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn signer(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SignatureHeader::VT_SIGNER,
                    None,
                )
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for SignatureHeader<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"signer",
                    Self::VT_SIGNER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct SignatureHeaderArgs<'a> {
        pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for SignatureHeaderArgs<'a> {
        #[inline]
        fn default() -> Self {
            SignatureHeaderArgs { signer: None }
        }
    }
    pub struct SignatureHeaderBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignatureHeaderBuilder<'a, 'b> {
        #[inline]
        pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(SignatureHeader::VT_SIGNER, signer);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> SignatureHeaderBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignatureHeaderBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<SignatureHeader<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for SignatureHeader<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("SignatureHeader");
            ds.field("signer", &self.signer());
            ds.finish()
        }
    }
    pub enum SignatureOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Signature<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Signature<'a> {
        type Inner = Signature<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Signature<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Signature { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignatureArgs<'args>,
        ) -> flatbuffers::WIPOffset<Signature<'bldr>> {
            let mut builder = SignatureBuilder::new(_fbb);
            if let Some(x) = args.signature {
                builder.add_signature(x);
            }
            if let Some(x) = args.header {
                builder.add_header(x);
            }
            builder.finish()
        }

        pub const VT_HEADER: flatbuffers::VOffsetT = 4;
        pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn header(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Signature::VT_HEADER,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn signature(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Signature::VT_SIGNATURE,
                    None,
                )
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for Signature<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"header",
                    Self::VT_HEADER,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"signature",
                    Self::VT_SIGNATURE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct SignatureArgs<'a> {
        pub header: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for SignatureArgs<'a> {
        #[inline]
        fn default() -> Self {
            SignatureArgs {
                header: None,
                signature: None,
            }
        }
    }
    pub struct SignatureBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignatureBuilder<'a, 'b> {
        #[inline]
        pub fn add_header(&mut self, header: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Signature::VT_HEADER, header);
        }
        #[inline]
        pub fn add_signature(
            &mut self,
            signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Signature::VT_SIGNATURE, signature);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SignatureBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignatureBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Signature<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Signature<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Signature");
            ds.field("header", &self.header());
            ds.field("signature", &self.signature());
            ds.finish()
        }
    }
    pub enum SignedOperationOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct SignedOperation<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for SignedOperation<'a> {
        type Inner = SignedOperation<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> SignedOperation<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            SignedOperation { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignedOperationArgs<'args>,
        ) -> flatbuffers::WIPOffset<SignedOperation<'bldr>> {
            let mut builder = SignedOperationBuilder::new(_fbb);
            if let Some(x) = args.signatures {
                builder.add_signatures(x);
            }
            if let Some(x) = args.operation {
                builder.add_operation(x);
            }
            builder.finish()
        }

        pub const VT_OPERATION: flatbuffers::VOffsetT = 4;
        pub const VT_SIGNATURES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn operation(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SignedOperation::VT_OPERATION,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn signatures(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Signature<'a>>>> {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Signature>>,
            >>(SignedOperation::VT_SIGNATURES, None)
        }
    }

    impl flatbuffers::Verifiable for SignedOperation<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    &"operation",
                    Self::VT_OPERATION,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Signature>>,
                >>(&"signatures", Self::VT_SIGNATURES, false)?
                .finish();
            Ok(())
        }
    }
    pub struct SignedOperationArgs<'a> {
        pub operation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub signatures: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Signature<'a>>>,
            >,
        >,
    }
    impl<'a> Default for SignedOperationArgs<'a> {
        #[inline]
        fn default() -> Self {
            SignedOperationArgs {
                operation: None,
                signatures: None,
            }
        }
    }
    pub struct SignedOperationBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignedOperationBuilder<'a, 'b> {
        #[inline]
        pub fn add_operation(
            &mut self,
            operation: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                SignedOperation::VT_OPERATION,
                operation,
            );
        }
        #[inline]
        pub fn add_signatures(
            &mut self,
            signatures: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Signature<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                SignedOperation::VT_SIGNATURES,
                signatures,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> SignedOperationBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignedOperationBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<SignedOperation<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for SignedOperation<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("SignedOperation");
            ds.field("operation", &self.operation());
            ds.field("signatures", &self.signatures());
            ds.finish()
        }
    }
    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_signed_operation<'a>(buf: &'a [u8]) -> SignedOperation<'a> {
        unsafe { flatbuffers::root_unchecked::<SignedOperation<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_signed_operation<'a>(buf: &'a [u8]) -> SignedOperation<'a> {
        unsafe { flatbuffers::size_prefixed_root_unchecked::<SignedOperation<'a>>(buf) }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `SignedOperation`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_signed_operation_unchecked`.
    pub fn root_as_signed_operation(
        buf: &[u8],
    ) -> Result<SignedOperation, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<SignedOperation>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `SignedOperation` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_signed_operation_unchecked`.
    pub fn size_prefixed_root_as_signed_operation(
        buf: &[u8],
    ) -> Result<SignedOperation, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<SignedOperation>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `SignedOperation` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_signed_operation_unchecked`.
    pub fn root_as_signed_operation_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<SignedOperation<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<SignedOperation<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `SignedOperation` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_signed_operation_unchecked`.
    pub fn size_prefixed_root_as_signed_operation_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<SignedOperation<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<SignedOperation<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a SignedOperation and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `SignedOperation`.
    pub unsafe fn root_as_signed_operation_unchecked(buf: &[u8]) -> SignedOperation {
        flatbuffers::root_unchecked::<SignedOperation>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed SignedOperation and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `SignedOperation`.
    pub unsafe fn size_prefixed_root_as_signed_operation_unchecked(buf: &[u8]) -> SignedOperation {
        flatbuffers::size_prefixed_root_unchecked::<SignedOperation>(buf)
    }
    #[inline]
    pub fn finish_signed_operation_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<SignedOperation<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_signed_operation_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<SignedOperation<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod hashgraph
