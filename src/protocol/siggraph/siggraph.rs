// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod siggraph {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_KEY_ALGORITHM: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_KEY_ALGORITHM: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_KEY_ALGORITHM: [KeyAlgorithm; 1] = [KeyAlgorithm::Ed25519];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct KeyAlgorithm(pub u8);
    #[allow(non_upper_case_globals)]
    impl KeyAlgorithm {
        pub const Ed25519: Self = Self(0);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 0;
        pub const ENUM_VALUES: &'static [Self] = &[Self::Ed25519];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Ed25519 => Some("Ed25519"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for KeyAlgorithm {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for KeyAlgorithm {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for KeyAlgorithm {
        type Output = KeyAlgorithm;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for KeyAlgorithm {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for KeyAlgorithm {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for KeyAlgorithm {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_KEY_ROLE: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_KEY_ROLE: u8 = 1;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_KEY_ROLE: [KeyRole; 2] = [KeyRole::Signing, KeyRole::Recovery];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct KeyRole(pub u8);
    #[allow(non_upper_case_globals)]
    impl KeyRole {
        pub const Signing: Self = Self(0);
        pub const Recovery: Self = Self(1);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 1;
        pub const ENUM_VALUES: &'static [Self] = &[Self::Signing, Self::Recovery];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Signing => Some("Signing"),
                Self::Recovery => Some("Recovery"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for KeyRole {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for KeyRole {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for KeyRole {
        type Output = KeyRole;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for KeyRole {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for KeyRole {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for KeyRole {}
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_ACTIONABLE: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_ACTIONABLE: u8 = 3;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ACTIONABLE: [Actionable; 4] = [
        Actionable::NONE,
        Actionable::CreateKey,
        Actionable::RevokeKey,
        Actionable::Recover,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Actionable(pub u8);
    #[allow(non_upper_case_globals)]
    impl Actionable {
        pub const NONE: Self = Self(0);
        pub const CreateKey: Self = Self(1);
        pub const RevokeKey: Self = Self(2);
        pub const Recover: Self = Self(3);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 3;
        pub const ENUM_VALUES: &'static [Self] =
            &[Self::NONE, Self::CreateKey, Self::RevokeKey, Self::Recover];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::CreateKey => Some("CreateKey"),
                Self::RevokeKey => Some("RevokeKey"),
                Self::Recover => Some("Recover"),
                _ => None,
            }
        }
    }
    impl std::fmt::Debug for Actionable {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Actionable {
        type Inner = Self;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = unsafe { flatbuffers::read_scalar_at::<u8>(buf, loc) };
            Self(b)
        }
    }

    impl flatbuffers::Push for Actionable {
        type Output = Actionable;
        #[inline]
        fn push(&self, dst: &mut [u8], _rest: &[u8]) {
            unsafe {
                flatbuffers::emplace_scalar::<u8>(dst, self.0);
            }
        }
    }

    impl flatbuffers::EndianScalar for Actionable {
        #[inline]
        fn to_little_endian(self) -> Self {
            let b = u8::to_le(self.0);
            Self(b)
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(self) -> Self {
            let b = u8::from_le(self.0);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Actionable {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Actionable {}
    pub struct ActionableUnionTableOffset {}

    pub enum CreateKeyOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct CreateKey<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for CreateKey<'a> {
        type Inner = CreateKey<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> CreateKey<'a> {
        pub const VT_KEY: flatbuffers::VOffsetT = 4;
        pub const VT_ALG: flatbuffers::VOffsetT = 6;
        pub const VT_ROLE: flatbuffers::VOffsetT = 8;
        pub const VT_EFFECTIVE_FROM: flatbuffers::VOffsetT = 10;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            CreateKey { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args CreateKeyArgs<'args>,
        ) -> flatbuffers::WIPOffset<CreateKey<'bldr>> {
            let mut builder = CreateKeyBuilder::new(_fbb);
            builder.add_effective_from(args.effective_from);
            if let Some(x) = args.key {
                builder.add_key(x);
            }
            builder.add_role(args.role);
            builder.add_alg(args.alg);
            builder.finish()
        }

        #[inline]
        pub fn key(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    CreateKey::VT_KEY,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn alg(&self) -> KeyAlgorithm {
            self._tab
                .get::<KeyAlgorithm>(CreateKey::VT_ALG, Some(KeyAlgorithm::Ed25519))
                .unwrap()
        }
        #[inline]
        pub fn role(&self) -> KeyRole {
            self._tab
                .get::<KeyRole>(CreateKey::VT_ROLE, Some(KeyRole::Signing))
                .unwrap()
        }
        #[inline]
        pub fn effective_from(&self) -> i64 {
            self._tab
                .get::<i64>(CreateKey::VT_EFFECTIVE_FROM, Some(0))
                .unwrap()
        }
    }

    impl flatbuffers::Verifiable for CreateKey<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "key",
                    Self::VT_KEY,
                    false,
                )?
                .visit_field::<KeyAlgorithm>("alg", Self::VT_ALG, false)?
                .visit_field::<KeyRole>("role", Self::VT_ROLE, false)?
                .visit_field::<i64>("effective_from", Self::VT_EFFECTIVE_FROM, false)?
                .finish();
            Ok(())
        }
    }
    pub struct CreateKeyArgs<'a> {
        pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub alg: KeyAlgorithm,
        pub role: KeyRole,
        pub effective_from: i64,
    }
    impl<'a> Default for CreateKeyArgs<'a> {
        #[inline]
        fn default() -> Self {
            CreateKeyArgs {
                key: None,
                alg: KeyAlgorithm::Ed25519,
                role: KeyRole::Signing,
                effective_from: 0,
            }
        }
    }

    pub struct CreateKeyBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> CreateKeyBuilder<'a, 'b> {
        #[inline]
        pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(CreateKey::VT_KEY, key);
        }
        #[inline]
        pub fn add_alg(&mut self, alg: KeyAlgorithm) {
            self.fbb_
                .push_slot::<KeyAlgorithm>(CreateKey::VT_ALG, alg, KeyAlgorithm::Ed25519);
        }
        #[inline]
        pub fn add_role(&mut self, role: KeyRole) {
            self.fbb_
                .push_slot::<KeyRole>(CreateKey::VT_ROLE, role, KeyRole::Signing);
        }
        #[inline]
        pub fn add_effective_from(&mut self, effective_from: i64) {
            self.fbb_
                .push_slot::<i64>(CreateKey::VT_EFFECTIVE_FROM, effective_from, 0);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CreateKeyBuilder<'a, 'b> {
            let start = _fbb.start_table();
            CreateKeyBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<CreateKey<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for CreateKey<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("CreateKey");
            ds.field("key", &self.key());
            ds.field("alg", &self.alg());
            ds.field("role", &self.role());
            ds.field("effective_from", &self.effective_from());
            ds.finish()
        }
    }
    pub enum RevokeKeyOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct RevokeKey<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for RevokeKey<'a> {
        type Inner = RevokeKey<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> RevokeKey<'a> {
        pub const VT_KEY: flatbuffers::VOffsetT = 4;
        pub const VT_EFFECTIVE_FROM: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            RevokeKey { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args RevokeKeyArgs<'args>,
        ) -> flatbuffers::WIPOffset<RevokeKey<'bldr>> {
            let mut builder = RevokeKeyBuilder::new(_fbb);
            builder.add_effective_from(args.effective_from);
            if let Some(x) = args.key {
                builder.add_key(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn key(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    RevokeKey::VT_KEY,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn effective_from(&self) -> i64 {
            self._tab
                .get::<i64>(RevokeKey::VT_EFFECTIVE_FROM, Some(0))
                .unwrap()
        }
    }

    impl flatbuffers::Verifiable for RevokeKey<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "key",
                    Self::VT_KEY,
                    false,
                )?
                .visit_field::<i64>("effective_from", Self::VT_EFFECTIVE_FROM, false)?
                .finish();
            Ok(())
        }
    }
    #[derive(Default)]
    pub struct RevokeKeyArgs<'a> {
        pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub effective_from: i64,
    }

    pub struct RevokeKeyBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> RevokeKeyBuilder<'a, 'b> {
        #[inline]
        pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(RevokeKey::VT_KEY, key);
        }
        #[inline]
        pub fn add_effective_from(&mut self, effective_from: i64) {
            self.fbb_
                .push_slot::<i64>(RevokeKey::VT_EFFECTIVE_FROM, effective_from, 0);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RevokeKeyBuilder<'a, 'b> {
            let start = _fbb.start_table();
            RevokeKeyBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<RevokeKey<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for RevokeKey<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("RevokeKey");
            ds.field("key", &self.key());
            ds.field("effective_from", &self.effective_from());
            ds.finish()
        }
    }
    pub enum RecoverOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Recover<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Recover<'a> {
        type Inner = Recover<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Recover<'a> {
        pub const VT_EFFECTIVE_FROM: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Recover { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args RecoverArgs,
        ) -> flatbuffers::WIPOffset<Recover<'bldr>> {
            let mut builder = RecoverBuilder::new(_fbb);
            builder.add_effective_from(args.effective_from);
            builder.finish()
        }

        #[inline]
        pub fn effective_from(&self) -> i64 {
            self._tab
                .get::<i64>(Recover::VT_EFFECTIVE_FROM, Some(0))
                .unwrap()
        }
    }

    impl flatbuffers::Verifiable for Recover<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i64>("effective_from", Self::VT_EFFECTIVE_FROM, false)?
                .finish();
            Ok(())
        }
    }
    #[derive(Default)]
    pub struct RecoverArgs {
        pub effective_from: i64,
    }

    pub struct RecoverBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> RecoverBuilder<'a, 'b> {
        #[inline]
        pub fn add_effective_from(&mut self, effective_from: i64) {
            self.fbb_
                .push_slot::<i64>(Recover::VT_EFFECTIVE_FROM, effective_from, 0);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RecoverBuilder<'a, 'b> {
            let start = _fbb.start_table();
            RecoverBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Recover<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Recover<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Recover");
            ds.field("effective_from", &self.effective_from());
            ds.finish()
        }
    }
    pub enum ActionOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Action<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Action<'a> {
        type Inner = Action<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Action<'a> {
        pub const VT_ACTIONABLE_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_ACTIONABLE: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Action { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args ActionArgs,
        ) -> flatbuffers::WIPOffset<Action<'bldr>> {
            let mut builder = ActionBuilder::new(_fbb);
            if let Some(x) = args.actionable {
                builder.add_actionable(x);
            }
            builder.add_actionable_type(args.actionable_type);
            builder.finish()
        }

        #[inline]
        pub fn actionable_type(&self) -> Actionable {
            self._tab
                .get::<Actionable>(Action::VT_ACTIONABLE_TYPE, Some(Actionable::NONE))
                .unwrap()
        }
        #[inline]
        pub fn actionable(&self) -> Option<flatbuffers::Table<'a>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                    Action::VT_ACTIONABLE,
                    None,
                )
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn actionable_as_create_key(&self) -> Option<CreateKey<'a>> {
            if self.actionable_type() == Actionable::CreateKey {
                self.actionable().map(CreateKey::init_from_table)
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn actionable_as_revoke_key(&self) -> Option<RevokeKey<'a>> {
            if self.actionable_type() == Actionable::RevokeKey {
                self.actionable().map(RevokeKey::init_from_table)
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn actionable_as_recover(&self) -> Option<Recover<'a>> {
            if self.actionable_type() == Actionable::Recover {
                self.actionable().map(Recover::init_from_table)
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for Action<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_union::<Actionable, _>(
                    "actionable_type",
                    Self::VT_ACTIONABLE_TYPE,
                    "actionable",
                    Self::VT_ACTIONABLE,
                    false,
                    |key, v, pos| match key {
                        Actionable::CreateKey => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<CreateKey>>(
                                "Actionable::CreateKey",
                                pos,
                            ),
                        Actionable::RevokeKey => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<RevokeKey>>(
                                "Actionable::RevokeKey",
                                pos,
                            ),
                        Actionable::Recover => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<Recover>>(
                                "Actionable::Recover",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct ActionArgs {
        pub actionable_type: Actionable,
        pub actionable: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for ActionArgs {
        #[inline]
        fn default() -> Self {
            ActionArgs {
                actionable_type: Actionable::NONE,
                actionable: None,
            }
        }
    }

    pub struct ActionBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> ActionBuilder<'a, 'b> {
        #[inline]
        pub fn add_actionable_type(&mut self, actionable_type: Actionable) {
            self.fbb_.push_slot::<Actionable>(
                Action::VT_ACTIONABLE_TYPE,
                actionable_type,
                Actionable::NONE,
            );
        }
        #[inline]
        pub fn add_actionable(
            &mut self,
            actionable: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Action::VT_ACTIONABLE, actionable);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ActionBuilder<'a, 'b> {
            let start = _fbb.start_table();
            ActionBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Action<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Action<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Action");
            ds.field("actionable_type", &self.actionable_type());
            match self.actionable_type() {
                Actionable::CreateKey => {
                    if let Some(x) = self.actionable_as_create_key() {
                        ds.field("actionable", &x)
                    } else {
                        ds.field(
                            "actionable",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                Actionable::RevokeKey => {
                    if let Some(x) = self.actionable_as_revoke_key() {
                        ds.field("actionable", &x)
                    } else {
                        ds.field(
                            "actionable",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                Actionable::Recover => {
                    if let Some(x) = self.actionable_as_recover() {
                        ds.field("actionable", &x)
                    } else {
                        ds.field(
                            "actionable",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("actionable", &x)
                }
            };
            ds.finish()
        }
    }
    pub enum OperationOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Operation<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Operation<'a> {
        type Inner = Operation<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Operation<'a> {
        pub const VT_VERSION: flatbuffers::VOffsetT = 4;
        pub const VT_SEQUENCE: flatbuffers::VOffsetT = 6;
        pub const VT_PREVIOUS: flatbuffers::VOffsetT = 8;
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 10;
        pub const VT_ACTIONS: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Operation { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args OperationArgs<'args>,
        ) -> flatbuffers::WIPOffset<Operation<'bldr>> {
            let mut builder = OperationBuilder::new(_fbb);
            builder.add_timestamp(args.timestamp);
            if let Some(x) = args.actions {
                builder.add_actions(x);
            }
            if let Some(x) = args.previous {
                builder.add_previous(x);
            }
            builder.add_sequence(args.sequence);
            builder.add_version(args.version);
            builder.finish()
        }

        #[inline]
        pub fn version(&self) -> u8 {
            self._tab.get::<u8>(Operation::VT_VERSION, Some(0)).unwrap()
        }
        #[inline]
        pub fn sequence(&self) -> u32 {
            self._tab
                .get::<u32>(Operation::VT_SEQUENCE, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn previous(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Operation::VT_PREVIOUS,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn timestamp(&self) -> i64 {
            self._tab
                .get::<i64>(Operation::VT_TIMESTAMP, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn actions(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Action<'a>>>> {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Action>>,
            >>(Operation::VT_ACTIONS, None)
        }
    }

    impl flatbuffers::Verifiable for Operation<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u8>("version", Self::VT_VERSION, false)?
                .visit_field::<u32>("sequence", Self::VT_SEQUENCE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "previous",
                    Self::VT_PREVIOUS,
                    false,
                )?
                .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Action>>,
                >>("actions", Self::VT_ACTIONS, false)?
                .finish();
            Ok(())
        }
    }
    #[derive(Default)]
    pub struct OperationArgs<'a> {
        pub version: u8,
        pub sequence: u32,
        pub previous: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub timestamp: i64,
        pub actions: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Action<'a>>>,
            >,
        >,
    }

    pub struct OperationBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> OperationBuilder<'a, 'b> {
        #[inline]
        pub fn add_version(&mut self, version: u8) {
            self.fbb_.push_slot::<u8>(Operation::VT_VERSION, version, 0);
        }
        #[inline]
        pub fn add_sequence(&mut self, sequence: u32) {
            self.fbb_
                .push_slot::<u32>(Operation::VT_SEQUENCE, sequence, 0);
        }
        #[inline]
        pub fn add_previous(
            &mut self,
            previous: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Operation::VT_PREVIOUS, previous);
        }
        #[inline]
        pub fn add_timestamp(&mut self, timestamp: i64) {
            self.fbb_
                .push_slot::<i64>(Operation::VT_TIMESTAMP, timestamp, 0);
        }
        #[inline]
        pub fn add_actions(
            &mut self,
            actions: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Action<'b>>>,
            >,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Operation::VT_ACTIONS, actions);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OperationBuilder<'a, 'b> {
            let start = _fbb.start_table();
            OperationBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Operation<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Operation<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Operation");
            ds.field("version", &self.version());
            ds.field("sequence", &self.sequence());
            ds.field("previous", &self.previous());
            ds.field("timestamp", &self.timestamp());
            ds.field("actions", &self.actions());
            ds.finish()
        }
    }
    pub enum SignatureHeaderOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct SignatureHeader<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for SignatureHeader<'a> {
        type Inner = SignatureHeader<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> SignatureHeader<'a> {
        pub const VT_SIGNER: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            SignatureHeader { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignatureHeaderArgs<'args>,
        ) -> flatbuffers::WIPOffset<SignatureHeader<'bldr>> {
            let mut builder = SignatureHeaderBuilder::new(_fbb);
            if let Some(x) = args.signer {
                builder.add_signer(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn signer(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SignatureHeader::VT_SIGNER,
                    None,
                )
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for SignatureHeader<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "signer",
                    Self::VT_SIGNER,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    #[derive(Default)]
    pub struct SignatureHeaderArgs<'a> {
        pub signer: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }

    pub struct SignatureHeaderBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignatureHeaderBuilder<'a, 'b> {
        #[inline]
        pub fn add_signer(&mut self, signer: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(SignatureHeader::VT_SIGNER, signer);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> SignatureHeaderBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignatureHeaderBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<SignatureHeader<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for SignatureHeader<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("SignatureHeader");
            ds.field("signer", &self.signer());
            ds.finish()
        }
    }
    pub enum SignatureOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Signature<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Signature<'a> {
        type Inner = Signature<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Signature<'a> {
        pub const VT_HEADER: flatbuffers::VOffsetT = 4;
        pub const VT_SIGNATURE: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Signature { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignatureArgs<'args>,
        ) -> flatbuffers::WIPOffset<Signature<'bldr>> {
            let mut builder = SignatureBuilder::new(_fbb);
            if let Some(x) = args.signature {
                builder.add_signature(x);
            }
            if let Some(x) = args.header {
                builder.add_header(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn header(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Signature::VT_HEADER,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn signature(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    Signature::VT_SIGNATURE,
                    None,
                )
                .map(|v| v.safe_slice())
        }
    }

    impl flatbuffers::Verifiable for Signature<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "header",
                    Self::VT_HEADER,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "signature",
                    Self::VT_SIGNATURE,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    #[derive(Default)]
    pub struct SignatureArgs<'a> {
        pub header: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }

    pub struct SignatureBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignatureBuilder<'a, 'b> {
        #[inline]
        pub fn add_header(&mut self, header: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Signature::VT_HEADER, header);
        }
        #[inline]
        pub fn add_signature(
            &mut self,
            signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Signature::VT_SIGNATURE, signature);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SignatureBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignatureBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Signature<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Signature<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Signature");
            ds.field("header", &self.header());
            ds.field("signature", &self.signature());
            ds.finish()
        }
    }
    pub enum SignedOperationOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct SignedOperation<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for SignedOperation<'a> {
        type Inner = SignedOperation<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> SignedOperation<'a> {
        pub const VT_OPERATION: flatbuffers::VOffsetT = 4;
        pub const VT_SIGNATURES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            SignedOperation { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignedOperationArgs<'args>,
        ) -> flatbuffers::WIPOffset<SignedOperation<'bldr>> {
            let mut builder = SignedOperationBuilder::new(_fbb);
            if let Some(x) = args.signatures {
                builder.add_signatures(x);
            }
            if let Some(x) = args.operation {
                builder.add_operation(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn operation(&self) -> Option<&'a [u8]> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SignedOperation::VT_OPERATION,
                    None,
                )
                .map(|v| v.safe_slice())
        }
        #[inline]
        pub fn signatures(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Signature<'a>>>> {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Signature>>,
            >>(SignedOperation::VT_SIGNATURES, None)
        }
    }

    impl flatbuffers::Verifiable for SignedOperation<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "operation",
                    Self::VT_OPERATION,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Signature>>,
                >>("signatures", Self::VT_SIGNATURES, false)?
                .finish();
            Ok(())
        }
    }
    #[derive(Default)]
    pub struct SignedOperationArgs<'a> {
        pub operation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub signatures: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Signature<'a>>>,
            >,
        >,
    }

    pub struct SignedOperationBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignedOperationBuilder<'a, 'b> {
        #[inline]
        pub fn add_operation(
            &mut self,
            operation: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                SignedOperation::VT_OPERATION,
                operation,
            );
        }
        #[inline]
        pub fn add_signatures(
            &mut self,
            signatures: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Signature<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                SignedOperation::VT_SIGNATURES,
                signatures,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> SignedOperationBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignedOperationBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<SignedOperation<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for SignedOperation<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("SignedOperation");
            ds.field("operation", &self.operation());
            ds.field("signatures", &self.signatures());
            ds.finish()
        }
    }
    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_signed_operation<'a>(buf: &'a [u8]) -> SignedOperation<'a> {
        unsafe { flatbuffers::root_unchecked::<SignedOperation<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_signed_operation<'a>(buf: &'a [u8]) -> SignedOperation<'a> {
        unsafe { flatbuffers::size_prefixed_root_unchecked::<SignedOperation<'a>>(buf) }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `SignedOperation`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_signed_operation_unchecked`.
    pub fn root_as_signed_operation(
        buf: &[u8],
    ) -> Result<SignedOperation, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<SignedOperation>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `SignedOperation` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_signed_operation_unchecked`.
    pub fn size_prefixed_root_as_signed_operation(
        buf: &[u8],
    ) -> Result<SignedOperation, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<SignedOperation>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `SignedOperation` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_signed_operation_unchecked`.
    pub fn root_as_signed_operation_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<SignedOperation<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<SignedOperation<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `SignedOperation` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_signed_operation_unchecked`.
    pub fn size_prefixed_root_as_signed_operation_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<SignedOperation<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<SignedOperation<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a SignedOperation and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `SignedOperation`.
    pub unsafe fn root_as_signed_operation_unchecked(buf: &[u8]) -> SignedOperation {
        flatbuffers::root_unchecked::<SignedOperation>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed SignedOperation and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `SignedOperation`.
    pub unsafe fn size_prefixed_root_as_signed_operation_unchecked(buf: &[u8]) -> SignedOperation {
        flatbuffers::size_prefixed_root_unchecked::<SignedOperation>(buf)
    }
    #[inline]
    pub fn finish_signed_operation_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<SignedOperation<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_signed_operation_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<SignedOperation<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod siggraph
